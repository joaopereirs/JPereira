#include <iostream>
#include <vector>
#include <string>
#include <bitset> //allows us to convert from integers to bit arrays
#include <cmath>

// you can include other headers
// you need for your code a
// you can use any headers from the C++ standard library

// do not alter this structured data type definition


struct BNode{
    std::string val;
    // this will contain
    // "x1", "x2"... "xn" in non-leaf nodes
    // "0" or "1" in leaf nodes

    BNode* left; // this will conventionally represent the 0 branch
    BNode* right; // this will conventionally represent the 1 branch

    // (as usual leaf nodes will have both left and right pointing to NULL)
};

BNode* tree_node(std::string e, BNode* l, BNode* r){
    BNode* tmp;
    tmp = new BNode;
    tmp->val = e;
    tmp->left = l;
    tmp->right = r;
    return tmp;
}


BNode* tree_structure(int n, int i){ //sets up the tree with all leaves as zero
    std::string s;
    if (i==n){ //n is the number of bits (not including the output --> thus 11 => n=2). When i==n it means we are at the leaf (output)
        s="0"; //s is zero because we want to fill the skeleton leaves just with zeros
        return tree_node(s, NULL, NULL); //since it is the leaf we just fill it with zeros for now
    } else {
        s = "x"; //when it is not a leaf (AKA i!=n) we want to name the nodes x1 x2 etc
        i++;
        s = s + std::to_string(i); //creating the x1 x2 x3 depending on the bit
        return tree_node(s, tree_structure(n,i),tree_structure(n, i)); //almost recursive to do the same thing over and over until we reach the leaf (n==i)
    }
}

void ordered_insertion(std::string e,BNode* bt, int n){ //fills skeleton with functions that have output of 1. "e" is the function (no output)
    std::string s;
    s.push_back(e[n]);
    if (n==e.size()){ //when you are at the leaf
        bt->val="1";
    } else if (s=="1"){ //if the bit is 1 you move right
        n++;
        ordered_insertion(e,bt->right,n); //by starting with n=0 and here moving up n++ we allow a sort of consistent counter to occur
    } else { //if bit is 0 you move left
        n++;
        ordered_insertion(e, bt->left, n);
    }
}

void deallocate_tree(BNode* t){
    if (t != NULL){
        deallocate_tree(t->left);
        deallocate_tree(t->right);
        delete t;
    }
}

int compare_vector(std::vector<std::string> v, std::string s){
    std::string s_nolsb = s;
    s_nolsb.erase(s.size()-1); //so that we discard LSB, while maintaining s as original
    for (int i = 0; i < v.size(); ++i) {
        std::string tmp = v[i];
        tmp.erase(v[i].size()-1); //doing the same for each value in vector
        if (s_nolsb == tmp){ //if all bits but LSB are the same (remembering the original value is also in there
            if (s[s.size()-1] != v[i][v[i].size()-1]){ //making sure LSBs arent equal (if not it is the original)
                return i;
            }
        }
    }
    return -1;
}

void delete_node(std::string e, BNode* bt, int n, std::string p){ //the string s will be given without the LSB. int p decides whether we are going to make the node 0 or 1

    std::string s;
    s.push_back(e[n]); //single bit, when n=0 it means MSB
    if (n != s.size()-1) { //meaning that were still not at the node before the last
        if (s == "0") { //if s="0"
            n++;
            delete_node(e, bt->left, n, p);
        } else { //if s="1"
            n++;
            delete_node(e,bt->right, n, p);
        }
    } else {
        if (s[s.size()-1]=='1') { //if last bit (before LSB) is "1" then we need to remove node going right
            bt->right = NULL;
            bt->right = tree_node(p, NULL, NULL);
        } else { //if last bit (before LSB) is "0" then we need to remove node going right
            bt->left = NULL;
            bt->left = tree_node(p, NULL, NULL);
        }

    }
}


void reduce_bt(BNode* bt,const std::vector<std::string>& fvalues, int len){ //len is the number of bits without output
    //1. set up vector of functions that output 0 (because we should in theory have a vector of functions that output 1 -- fvalues1) -- non optimized
    std::vector<std::string> fvalues_zero, fvalues_one=fvalues;

    if (len == 2){
        for (int i = 0; i < std::pow(2,len); ++i) {
            int tmp=0; //means that bit array does not exist in the vector of output-1 functions
            for (int j = 0; j < fvalues_one.size(); ++j) {
                if (std::bitset<2>(i).to_string() == fvalues_one[j]){
                    tmp=1; //means that array exists as an output-1 function
                }
            }
            if (tmp == 0){
                fvalues_zero.push_back(std::bitset<2>(i).to_string());
            }
        }
    } else if (len == 3){ //when you have 3 bit
        for (int i = 0; i < std::pow(2,len); ++i) {
            int tmp=0; //means that bit array does not exist in the vector of output-1 functions
            for (int j = 0; j < fvalues_one.size(); ++j) {
                if (std::bitset<3>(i).to_string() == fvalues_one[j]){
                    tmp=1; //means that array exists as an output-1 function
                }
            }
            if (tmp == 0){
                fvalues_zero.push_back(std::bitset<3>(i).to_string());
            }
        }
    } else if (len == 4){ //when you have 4 bit
        for (int i = 0; i < std::pow(2,len); ++i) {
            int tmp=0; //means that bit array does not exist in the vector of output-1 functions
            for (int j = 0; j < fvalues_one.size(); ++j) {
                if (std::bitset<4>(i).to_string() == fvalues_one[j]){
                    tmp=1; //means that array exists as an output-1 function
                }
            }
            if (tmp == 0){
                fvalues_zero.push_back(std::bitset<4>(i).to_string());
            }
        }
    } else if (len == 5){ //when you have 5 bit
        for (int i = 0; i < std::pow(2,len); ++i) {
            int tmp=0; //means that bit array does not exist in the vector of output-1 functions
            for (int j = 0; j < fvalues_one.size(); ++j) {
                if (std::bitset<5>(i).to_string() == fvalues_one[j]){
                    tmp=1; //means that array exists as an output-1 function
                }
            }
            if (tmp == 0){
                fvalues_zero.push_back(std::bitset<5>(i).to_string());
            }
        }
    } else if (len == 6){ //when you have 6 bit
        for (int i = 0; i < std::pow(2,len); ++i) {
            int tmp=0; //means that bit array does not exist in the vector of output-1 functions
            for (int j = 0; j < fvalues_one.size(); ++j) {
                if (std::bitset<6>(i).to_string() == fvalues_one[j]){
                    tmp=1; //means that array exists as an output-1 function
                }
            }
            if (tmp == 0){
                fvalues_zero.push_back(std::bitset<6>(i).to_string());
            }
        }
    }
    //now we have a vector of all the inputs giving 1 and giving 0
    for (int i = 0; i < fvalues_one.size(); ++i) { //doing it first for the vector of 1
        if (compare_vector(fvalues_one,fvalues_one[i]) != -1){ //will yield the index if exists, else -1
            delete_node(fvalues_one[i],bt,0,"1");
        }
    }
    for (int i = 0; i < fvalues_zero.size(); ++i) { //doing it for the vector of 0
        if (compare_vector(fvalues_zero,fvalues_zero[i]) != -1){ //will yield the index if exists, else -1
            delete_node(fvalues_zero[i],bt,0,"0");
        }
    }
}

BNode* build_bt(const std::vector<std::string>& fvalues) {
    BNode* bt;
    int len = fvalues[0].size(); //first we figure out how many bits there are (not including output)
    bt = tree_structure(len,0); //then we make an empty tree (structure) that is the size of the number of bits
    for (int i = 0; i < fvalues.size(); ++i) { //(fvalues.size() is the number of different combinations that have an output of 1) once the structure is made, we need to substitute the appropriate leaves with 1s
        ordered_insertion(fvalues[i],bt,0);
    }
    reduce_bt(bt,fvalues,len);
    return bt;
}

int label_to_idx(const std::string& label){

    std::string out;

    for(int i = 1; i < label.size(); i++){
        out.push_back(label[i]);
    }

    return std::stoi(out) - 1;
}

// do not alter the following line that begins the function eval_bt
std::string eval_bt(BNode* bt, const std::string& input){

    if( (bt->left == NULL) && (bt->right == NULL) ){
        return bt->val;
    }
    else{
        int idx = label_to_idx(bt->val);
        std::string input_idx;
        input_idx.push_back(input[idx]);

        if(input_idx == "0"){
            return eval_bt(bt->left, input);
        }
        else{
            return eval_bt(bt->right, input);
        }
    }
}

// do not alter the following function
int n_nodes_bt(BNode* t){ //the number of nodes in the tree - will be used to check whether program has reduced --> to get rid of it just make it null
    if(t == NULL){
        return 0;
    }
    else{
        return 1 + n_nodes_bt(t->left) + n_nodes_bt(t->right);
    }
}

class BoolTree{
public:

    BoolTree(const std::vector<std::string>& fvalues){
        t = build_bt(fvalues);
    }

    std::string eval(const std::string& s){
        return eval_bt(t, s);
    }

    int n_nodes(){
        return n_nodes_bt(t);
    }

    ~BoolTree(){
        deallocate_tree(t);
    }

private:
    BNode* t;
};

int main (){
    std::vector<std::string> fv;
    std::string row;

    row = "11";
    fv.push_back(row);

    BoolTree ft1(fv);
    // as in the second assignment we give as input only the rows
    // of the truth table whose value is 1
    // (this is an example with the boolean "and" function)

    fv.clear();

    row = "010";
    fv.push_back(row);
    row = "011";
    fv.push_back(row);
    row = "110";
    fv.push_back(row);
    row = "111";
    fv.push_back(row);

    BoolTree ft2(fv);
    // this corresponds to the f(x1, x2, x3) example shown above

    std::cout << ft1.n_nodes() << std::endl;
    // we expect this to print 5

    std::cout << ft2.n_nodes() << std::endl;
    // if the algorithm is such that it builds the smallest possible corresponding tree
    // for the boolean function we are considering
    // then this will print 3 (see tree diagram in the example above)

    std::cout << ft1.eval("01") << std::endl;
    // this should print "0"

    std::cout << ft1.eval("11") << std::endl;
    // this should print "1"

    std::cout << ft2.eval("001") << std::endl;
    // this should print "0"

    std::cout << ft2.eval("110") << std::endl;
    // this should print "1"
}