#include <iostream>

typedef int tree_t;

struct TreeNode{
    tree_t val;
    TreeNode* left;
    TreeNode* right;
};

TreeNode* cons_tree(tree_t e, TreeNode* l, TreeNode* r){
    TreeNode* tmp;
    tmp = new TreeNode;
    tmp->val = e;
    tmp->left = l;
    tmp->right = r;
    return tmp;
}

TreeNode* ordered_insertion_tree(tree_t e, TreeNode* t){
    if(t == NULL){
        return cons_tree(e, NULL, NULL);
    }
    else if(e < t->val){
        t->left = ordered_insertion_tree(e, t->left);
        return t;
    }
    else{
        t->right = ordered_insertion_tree(e, t->right);
        return t;
    }
}

void deallocate_tree(TreeNode* t){
    if(t != NULL){
        deallocate_tree(t->left);
        deallocate_tree(t->right);
        delete t;
    }
}

bool search_ordered_tree(tree_t e, TreeNode* t){
    if (t == NULL){
        return false;
    } else if (e == t->val) {
        std::cout<<"value: "<<t->val<<std::endl;
        return true;
    } else if (e < t->val) {
        std::cout<<"current value going left: "<<t->val<<std::endl;
        return search_ordered_tree(e, t->left);
    } else {
        std::cout<<"current value going right: "<<t->val<<std::endl;
        return search_ordered_tree(e, t->right);
    }
}

int main(){
    TreeNode* t;
    t = NULL;

    t = ordered_insertion_tree(15, t);
    t = ordered_insertion_tree(20, t);
    t = ordered_insertion_tree(6, t);
    t = ordered_insertion_tree(1, t);
    t = ordered_insertion_tree(4, t);
    t = ordered_insertion_tree(18, t);
    t = ordered_insertion_tree(9, t);

    tree_t e;
    std::cout<<"which value would you like to know if it is in the tree?"<<std::endl;
    std::cin >> e;
    if (search_ordered_tree(e, t)){
        std::cout<<"Value found!!"<<std::endl;
    } else {
        std::cout<<"Value not found..."<<std::endl;
    }

    deallocate_tree(t);

}