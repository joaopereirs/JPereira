#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <fstream>
#include <cstdlib>

typedef int list_t;

struct ListNode{
    list_t val;
    ListNode* next;
};

ListNode* cons_list(list_t e, ListNode* l){
    ListNode* tmp;

    tmp = new ListNode;

    tmp->val = e;
    tmp->next = l;

    return tmp;
}

void print_list(ListNode* l){
    while(l != NULL){
        std::cout << l->val << std::endl;
        l = l->next;
    }
}

void deallocate_list_rec(ListNode* l){
    ListNode* tmp;

    if(l != NULL){
        tmp = l->next;
        delete l;
        deallocate_list_rec(tmp);
    }
}

int length_list_rec(ListNode* l){
    if(l != NULL){
        return 1 + length_list_rec(l->next);
    }
    else {
        return 0;
    }
}

ListNode* ordered_insertion_list(list_t e, ListNode* l){
    if (l == NULL){
        return cons_list(e,l);
    }
    else if (e < l->val){
        return cons_list(e,l);
    }
    else {
        l->next=ordered_insertion_list(e, l->next);
        return l;
    }
}

list_t curmax_value(ListNode* l, list_t curmax){
    list_t tmp=0;
    while (l != NULL){
        if (l->val < curmax){
            if (l->val > tmp){
                tmp = l->val;
                l = l->next;
            } else {
                l = l->next;
            }
        } else {
            l = l->next;
        }
    }
//  std::cout<<"the new current max is: "<<tmp<<std::endl;
    return tmp;
}

list_t max_value(ListNode* l){
    list_t tmp = 0;
    while (l != NULL) { //will determine max value of list
        if (l->val > tmp) {
            tmp = l->val;
            l = l->next;
        } else {
            l = l->next;
        }
    }
    return tmp;
}

ListNode* ordered_copy_list(ListNode* l) {
    ListNode* n = NULL;
    list_t tmp = max_value(l);
    n = cons_list(tmp, n);
//    std::cout<<"largest value in list: "<<tmp<<std::endl;
    while (l != NULL){
        tmp = curmax_value(l,tmp);
        std::cout<<"current max in list: "<<tmp<<std::endl;
        n = cons_list(tmp,n);
        l = l->next;
    }
    return n;
}

int main(){
    std::ifstream infile;
    infile.open("input.txt");

    if(!infile.is_open()){
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }

    list_t tmp, e, user=1;
    ListNode* l = NULL;
    while(infile >> tmp){
        l = cons_list(tmp, l);
    }

    infile.close();

    std::cout<<"original list was"<<std::endl;
    print_list(l);

    std::cout<<std::endl<<"the new list is"<<std::endl;
    print_list(ordered_copy_list(l));

    deallocate_list_rec(l);
}